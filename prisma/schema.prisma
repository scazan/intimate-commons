// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  previewFeatures = ["relationJoins", "jsonProtocol", "postgresqlExtensions"]
  relationMode    = "foreignKeys"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  shadowDatabaseUrl = env("VERCELPOSTGRES_URL_NON_POOLING") // used for migrations
}

model Item {
  id          String  @id @default(cuid())
  title       String
  description String?

  isUserDefined Boolean @default(false)
  isSubjectOnly Boolean @default(false)
  sentiment     Int

  subs       Choice[] @relation("subject")
  objs       Choice[] @relation("object")
  created_at DateTime @default(now())

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  @@index([id])
  @@index([isSubjectOnly])
  @@unique([title, groupId])
}

model Choice {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  sub   Item   @relation("subject", fields: [subId], references: [id])
  subId String

  obj   Item   @relation("object", fields: [objId], references: [id])
  objId String

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  created_at DateTime @default(now())

  @@index([objId])
  @@index([subId])
  @@index([sessionId])
  @@index([userId])
  @@index([userId, sessionId])
  @@index([sessionId, subId])
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String?
  choices    Choice[]
  sessions   Session[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([email])
}

model Session {
  id         String   @id @default(cuid())
  choices    Choice[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  created_at DateTime @default(now())
  Story      Story[]
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    String

  @@index([userId])
  @@index([groupId])
  @@index([userId, groupId])
}

model Group {
  id      String    @id @default(cuid())
  Story   Story[]
  Session Session[]
  Item    Item[]

  @@index([id])
}

model Story {
  id         String   @id @default(cuid())
  text       String
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  String
  created_at DateTime @default(now())
  mediaID    String?
  group      Group?   @relation(fields: [groupId], references: [id])
  groupId    String?

  @@index([id])
  @@index([groupId])
  @@index([mediaID])
  @@index([sessionId])
  @@index([sessionId, created_at])
}

// GENERATORS
generator zod {
  provider = "zod-prisma"
  output   = "../src/lib/intimateCommons/models" // (default) the directory where generated zod schemas will be saved

  relationModel = false // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PageModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
